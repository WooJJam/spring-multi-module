name: Java Continuous Delivery with Gradle

on:
  push:
    branches:
      - "main"
  
jobs:
  build-docker-image:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'


    - name: make application-database.yml
      run: |
        cd spring-multi-domain/src/main/resources

         touch ./application-database.yml

         echo "${{ secrets.DATABASE }}" >> ./application-database.yml

      shell: bash
    
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0

    # Spring Boot 어플리케이션 Build
    - name: Build with Gradle Wrapper
      run: |
        chmod +x ./gradlew
        ./gradlew :spring-multi-api:build

    # Docker 이미지 Build
    - name: docker image build
      run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/multi-module ./spring-multi-api

    # DockerHub Login (push 하기 위해)
    - name: docker login
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}

    # Docker hub 로 push
    - name: Docker Hub push
      run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/multi-module
    - name: EC2에 접속 후 배포
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_INSTANCE_HOST }}
        username: ubuntu
        key: ${{ secrets.EC2_INSTANCE_PRIVATE_KEY }}
        script: |
          sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/multi-module

          sudo docker stop multi-module-server

          sudo docker rm multi-module-server

          sudo docker run --name multi-module-server -d -p 8080:8080 -e TZ=Asia/Seoul ${{ secrets.DOCKERHUB_USERNAME }}/multi-module

          sudo docker image prune -f
